#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="团队教务管理系统")]
public partial class DataClassesDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void Insertadministrator(administrator instance);
  partial void Updateadministrator(administrator instance);
  partial void Deleteadministrator(administrator instance);
  partial void Insertassignment(assignment instance);
  partial void Updateassignment(assignment instance);
  partial void Deleteassignment(assignment instance);
  partial void Insertcourse(course instance);
  partial void Updatecourse(course instance);
  partial void Deletecourse(course instance);
  partial void Insertsemester(semester instance);
  partial void Updatesemester(semester instance);
  partial void Deletesemester(semester instance);
  partial void Insertsources(sources instance);
  partial void Updatesources(sources instance);
  partial void Deletesources(sources instance);
  partial void Inserttask(task instance);
  partial void Updatetask(task instance);
  partial void Deletetask(task instance);
  partial void Insertteacher(teacher instance);
  partial void Updateteacher(teacher instance);
  partial void Deleteteacher(teacher instance);
  partial void Insertteam(team instance);
  partial void Updateteam(team instance);
  partial void Deleteteam(team instance);
  partial void Insertstudent(student instance);
  partial void Updatestudent(student instance);
  partial void Deletestudent(student instance);
  #endregion
	
	public DataClassesDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["团队教务管理系统ConnectionString1"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<administrator> administrator
	{
		get
		{
			return this.GetTable<administrator>();
		}
	}
	
	public System.Data.Linq.Table<assignment> assignment
	{
		get
		{
			return this.GetTable<assignment>();
		}
	}
	
	public System.Data.Linq.Table<course> course
	{
		get
		{
			return this.GetTable<course>();
		}
	}
	
	public System.Data.Linq.Table<semester> semester
	{
		get
		{
			return this.GetTable<semester>();
		}
	}
	
	public System.Data.Linq.Table<sources> sources
	{
		get
		{
			return this.GetTable<sources>();
		}
	}
	
	public System.Data.Linq.Table<task> task
	{
		get
		{
			return this.GetTable<task>();
		}
	}
	
	public System.Data.Linq.Table<teacher> teacher
	{
		get
		{
			return this.GetTable<teacher>();
		}
	}
	
	public System.Data.Linq.Table<team> team
	{
		get
		{
			return this.GetTable<team>();
		}
	}
	
	public System.Data.Linq.Table<student> student
	{
		get
		{
			return this.GetTable<student>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.administrator")]
public partial class administrator : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _adminID;
	
	private string _password;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnadminIDChanging(int value);
    partial void OnadminIDChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    #endregion
	
	public administrator()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_adminID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int adminID
	{
		get
		{
			return this._adminID;
		}
		set
		{
			if ((this._adminID != value))
			{
				this.OnadminIDChanging(value);
				this.SendPropertyChanging();
				this._adminID = value;
				this.SendPropertyChanged("adminID");
				this.OnadminIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="VarChar(10)")]
	public string password
	{
		get
		{
			return this._password;
		}
		set
		{
			if ((this._password != value))
			{
				this.OnpasswordChanging(value);
				this.SendPropertyChanging();
				this._password = value;
				this.SendPropertyChanged("password");
				this.OnpasswordChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.assignment")]
public partial class assignment : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _assignID;
	
	private System.Nullable<int> _teamEveryScore;
	
	private System.Nullable<double> _assignRate;
	
	private System.Nullable<int> _teamID;
	
	private string _assignName;
	
	private System.Nullable<System.DateTime> _uploadTime;
	
	private System.Nullable<bool> _ifHanded;
	
	private System.Nullable<int> _taskid;
	
	private string _AssignmentText;
	
	private EntityRef<task> _task;
	
	private EntityRef<team> _team;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnassignIDChanging(int value);
    partial void OnassignIDChanged();
    partial void OnteamEveryScoreChanging(System.Nullable<int> value);
    partial void OnteamEveryScoreChanged();
    partial void OnassignRateChanging(System.Nullable<double> value);
    partial void OnassignRateChanged();
    partial void OnteamIDChanging(System.Nullable<int> value);
    partial void OnteamIDChanged();
    partial void OnassignNameChanging(string value);
    partial void OnassignNameChanged();
    partial void OnuploadTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnuploadTimeChanged();
    partial void OnifHandedChanging(System.Nullable<bool> value);
    partial void OnifHandedChanged();
    partial void OntaskidChanging(System.Nullable<int> value);
    partial void OntaskidChanged();
    partial void OnAssignmentTextChanging(string value);
    partial void OnAssignmentTextChanged();
    #endregion
	
	public assignment()
	{
		this._task = default(EntityRef<task>);
		this._team = default(EntityRef<team>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_assignID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int assignID
	{
		get
		{
			return this._assignID;
		}
		set
		{
			if ((this._assignID != value))
			{
				this.OnassignIDChanging(value);
				this.SendPropertyChanging();
				this._assignID = value;
				this.SendPropertyChanged("assignID");
				this.OnassignIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_teamEveryScore", DbType="Int")]
	public System.Nullable<int> teamEveryScore
	{
		get
		{
			return this._teamEveryScore;
		}
		set
		{
			if ((this._teamEveryScore != value))
			{
				this.OnteamEveryScoreChanging(value);
				this.SendPropertyChanging();
				this._teamEveryScore = value;
				this.SendPropertyChanged("teamEveryScore");
				this.OnteamEveryScoreChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_assignRate", DbType="Float")]
	public System.Nullable<double> assignRate
	{
		get
		{
			return this._assignRate;
		}
		set
		{
			if ((this._assignRate != value))
			{
				this.OnassignRateChanging(value);
				this.SendPropertyChanging();
				this._assignRate = value;
				this.SendPropertyChanged("assignRate");
				this.OnassignRateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_teamID", DbType="Int")]
	public System.Nullable<int> teamID
	{
		get
		{
			return this._teamID;
		}
		set
		{
			if ((this._teamID != value))
			{
				if (this._team.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnteamIDChanging(value);
				this.SendPropertyChanging();
				this._teamID = value;
				this.SendPropertyChanged("teamID");
				this.OnteamIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_assignName", DbType="VarChar(50)")]
	public string assignName
	{
		get
		{
			return this._assignName;
		}
		set
		{
			if ((this._assignName != value))
			{
				this.OnassignNameChanging(value);
				this.SendPropertyChanging();
				this._assignName = value;
				this.SendPropertyChanged("assignName");
				this.OnassignNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_uploadTime", DbType="Date")]
	public System.Nullable<System.DateTime> uploadTime
	{
		get
		{
			return this._uploadTime;
		}
		set
		{
			if ((this._uploadTime != value))
			{
				this.OnuploadTimeChanging(value);
				this.SendPropertyChanging();
				this._uploadTime = value;
				this.SendPropertyChanged("uploadTime");
				this.OnuploadTimeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ifHanded", DbType="Bit")]
	public System.Nullable<bool> ifHanded
	{
		get
		{
			return this._ifHanded;
		}
		set
		{
			if ((this._ifHanded != value))
			{
				this.OnifHandedChanging(value);
				this.SendPropertyChanging();
				this._ifHanded = value;
				this.SendPropertyChanged("ifHanded");
				this.OnifHandedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_taskid", DbType="Int")]
	public System.Nullable<int> taskid
	{
		get
		{
			return this._taskid;
		}
		set
		{
			if ((this._taskid != value))
			{
				if (this._task.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OntaskidChanging(value);
				this.SendPropertyChanging();
				this._taskid = value;
				this.SendPropertyChanged("taskid");
				this.OntaskidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssignmentText", DbType="VarChar(1000)")]
	public string AssignmentText
	{
		get
		{
			return this._AssignmentText;
		}
		set
		{
			if ((this._AssignmentText != value))
			{
				this.OnAssignmentTextChanging(value);
				this.SendPropertyChanging();
				this._AssignmentText = value;
				this.SendPropertyChanged("AssignmentText");
				this.OnAssignmentTextChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="task_assignment", Storage="_task", ThisKey="taskid", OtherKey="taskid", IsForeignKey=true)]
	public task task
	{
		get
		{
			return this._task.Entity;
		}
		set
		{
			task previousValue = this._task.Entity;
			if (((previousValue != value) 
						|| (this._task.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._task.Entity = null;
					previousValue.assignment.Remove(this);
				}
				this._task.Entity = value;
				if ((value != null))
				{
					value.assignment.Add(this);
					this._taskid = value.taskid;
				}
				else
				{
					this._taskid = default(Nullable<int>);
				}
				this.SendPropertyChanged("task");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="team_assignment", Storage="_team", ThisKey="teamID", OtherKey="teamID", IsForeignKey=true)]
	public team team
	{
		get
		{
			return this._team.Entity;
		}
		set
		{
			team previousValue = this._team.Entity;
			if (((previousValue != value) 
						|| (this._team.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._team.Entity = null;
					previousValue.assignment.Remove(this);
				}
				this._team.Entity = value;
				if ((value != null))
				{
					value.assignment.Add(this);
					this._teamID = value.teamID;
				}
				else
				{
					this._teamID = default(Nullable<int>);
				}
				this.SendPropertyChanged("team");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.course")]
public partial class course : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _courseName;
	
	private int _courseID;
	
	private System.Nullable<System.DateTime> _courseTime;
	
	private string _coursePlace;
	
	private System.Nullable<int> _credit;
	
	private System.Nullable<int> _teacherID;
	
	private System.Nullable<int> _weekNmuber;
	
	private string _notice;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncourseNameChanging(string value);
    partial void OncourseNameChanged();
    partial void OncourseIDChanging(int value);
    partial void OncourseIDChanged();
    partial void OncourseTimeChanging(System.Nullable<System.DateTime> value);
    partial void OncourseTimeChanged();
    partial void OncoursePlaceChanging(string value);
    partial void OncoursePlaceChanged();
    partial void OncreditChanging(System.Nullable<int> value);
    partial void OncreditChanged();
    partial void OnteacherIDChanging(System.Nullable<int> value);
    partial void OnteacherIDChanged();
    partial void OnweekNmuberChanging(System.Nullable<int> value);
    partial void OnweekNmuberChanged();
    partial void OnnoticeChanging(string value);
    partial void OnnoticeChanged();
    #endregion
	
	public course()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_courseName", DbType="VarChar(10)")]
	public string courseName
	{
		get
		{
			return this._courseName;
		}
		set
		{
			if ((this._courseName != value))
			{
				this.OncourseNameChanging(value);
				this.SendPropertyChanging();
				this._courseName = value;
				this.SendPropertyChanged("courseName");
				this.OncourseNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_courseID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int courseID
	{
		get
		{
			return this._courseID;
		}
		set
		{
			if ((this._courseID != value))
			{
				this.OncourseIDChanging(value);
				this.SendPropertyChanging();
				this._courseID = value;
				this.SendPropertyChanged("courseID");
				this.OncourseIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_courseTime", DbType="Date")]
	public System.Nullable<System.DateTime> courseTime
	{
		get
		{
			return this._courseTime;
		}
		set
		{
			if ((this._courseTime != value))
			{
				this.OncourseTimeChanging(value);
				this.SendPropertyChanging();
				this._courseTime = value;
				this.SendPropertyChanged("courseTime");
				this.OncourseTimeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_coursePlace", DbType="VarChar(10)")]
	public string coursePlace
	{
		get
		{
			return this._coursePlace;
		}
		set
		{
			if ((this._coursePlace != value))
			{
				this.OncoursePlaceChanging(value);
				this.SendPropertyChanging();
				this._coursePlace = value;
				this.SendPropertyChanged("coursePlace");
				this.OncoursePlaceChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_credit", DbType="Int")]
	public System.Nullable<int> credit
	{
		get
		{
			return this._credit;
		}
		set
		{
			if ((this._credit != value))
			{
				this.OncreditChanging(value);
				this.SendPropertyChanging();
				this._credit = value;
				this.SendPropertyChanged("credit");
				this.OncreditChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_teacherID", DbType="Int")]
	public System.Nullable<int> teacherID
	{
		get
		{
			return this._teacherID;
		}
		set
		{
			if ((this._teacherID != value))
			{
				this.OnteacherIDChanging(value);
				this.SendPropertyChanging();
				this._teacherID = value;
				this.SendPropertyChanged("teacherID");
				this.OnteacherIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_weekNmuber", DbType="Int")]
	public System.Nullable<int> weekNmuber
	{
		get
		{
			return this._weekNmuber;
		}
		set
		{
			if ((this._weekNmuber != value))
			{
				this.OnweekNmuberChanging(value);
				this.SendPropertyChanging();
				this._weekNmuber = value;
				this.SendPropertyChanged("weekNmuber");
				this.OnweekNmuberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_notice", DbType="VarChar(300)")]
	public string notice
	{
		get
		{
			return this._notice;
		}
		set
		{
			if ((this._notice != value))
			{
				this.OnnoticeChanging(value);
				this.SendPropertyChanging();
				this._notice = value;
				this.SendPropertyChanged("notice");
				this.OnnoticeChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.semester")]
public partial class semester : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private System.Nullable<System.DateTime> _startTime;
	
	private System.Nullable<System.DateTime> _endTime;
	
	private System.Nullable<int> _weekNumber;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnstartTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnstartTimeChanged();
    partial void OnendTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnendTimeChanged();
    partial void OnweekNumberChanging(System.Nullable<int> value);
    partial void OnweekNumberChanged();
    #endregion
	
	public semester()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_startTime", DbType="DateTime")]
	public System.Nullable<System.DateTime> startTime
	{
		get
		{
			return this._startTime;
		}
		set
		{
			if ((this._startTime != value))
			{
				this.OnstartTimeChanging(value);
				this.SendPropertyChanging();
				this._startTime = value;
				this.SendPropertyChanged("startTime");
				this.OnstartTimeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_endTime", DbType="DateTime")]
	public System.Nullable<System.DateTime> endTime
	{
		get
		{
			return this._endTime;
		}
		set
		{
			if ((this._endTime != value))
			{
				this.OnendTimeChanging(value);
				this.SendPropertyChanging();
				this._endTime = value;
				this.SendPropertyChanged("endTime");
				this.OnendTimeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_weekNumber", DbType="Int")]
	public System.Nullable<int> weekNumber
	{
		get
		{
			return this._weekNumber;
		}
		set
		{
			if ((this._weekNumber != value))
			{
				this.OnweekNumberChanging(value);
				this.SendPropertyChanging();
				this._weekNumber = value;
				this.SendPropertyChanged("weekNumber");
				this.OnweekNumberChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.sources")]
public partial class sources : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.Nullable<int> _teacherID;
	
	private int _sourcesID;
	
	private string _sourcesName;
	
	private System.Nullable<System.DateTime> _uploadTime;
	
	private EntityRef<teacher> _teacher;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnteacherIDChanging(System.Nullable<int> value);
    partial void OnteacherIDChanged();
    partial void OnsourcesIDChanging(int value);
    partial void OnsourcesIDChanged();
    partial void OnsourcesNameChanging(string value);
    partial void OnsourcesNameChanged();
    partial void OnuploadTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnuploadTimeChanged();
    #endregion
	
	public sources()
	{
		this._teacher = default(EntityRef<teacher>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_teacherID", DbType="Int")]
	public System.Nullable<int> teacherID
	{
		get
		{
			return this._teacherID;
		}
		set
		{
			if ((this._teacherID != value))
			{
				if (this._teacher.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnteacherIDChanging(value);
				this.SendPropertyChanging();
				this._teacherID = value;
				this.SendPropertyChanged("teacherID");
				this.OnteacherIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sourcesID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int sourcesID
	{
		get
		{
			return this._sourcesID;
		}
		set
		{
			if ((this._sourcesID != value))
			{
				this.OnsourcesIDChanging(value);
				this.SendPropertyChanging();
				this._sourcesID = value;
				this.SendPropertyChanged("sourcesID");
				this.OnsourcesIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sourcesName", DbType="VarChar(50)")]
	public string sourcesName
	{
		get
		{
			return this._sourcesName;
		}
		set
		{
			if ((this._sourcesName != value))
			{
				this.OnsourcesNameChanging(value);
				this.SendPropertyChanging();
				this._sourcesName = value;
				this.SendPropertyChanged("sourcesName");
				this.OnsourcesNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_uploadTime", DbType="Date")]
	public System.Nullable<System.DateTime> uploadTime
	{
		get
		{
			return this._uploadTime;
		}
		set
		{
			if ((this._uploadTime != value))
			{
				this.OnuploadTimeChanging(value);
				this.SendPropertyChanging();
				this._uploadTime = value;
				this.SendPropertyChanged("uploadTime");
				this.OnuploadTimeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="teacher_sources", Storage="_teacher", ThisKey="teacherID", OtherKey="teacherID", IsForeignKey=true)]
	public teacher teacher
	{
		get
		{
			return this._teacher.Entity;
		}
		set
		{
			teacher previousValue = this._teacher.Entity;
			if (((previousValue != value) 
						|| (this._teacher.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._teacher.Entity = null;
					previousValue.sources.Remove(this);
				}
				this._teacher.Entity = value;
				if ((value != null))
				{
					value.sources.Add(this);
					this._teacherID = value.teacherID;
				}
				else
				{
					this._teacherID = default(Nullable<int>);
				}
				this.SendPropertyChanged("teacher");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.task")]
public partial class task : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _taskid;
	
	private System.Nullable<System.DateTime> _starttime;
	
	private System.Nullable<System.DateTime> _endtime;
	
	private System.Nullable<double> _taskrate;
	
	private string _taskname;
	
	private string _taskdetail;
	
	private string _tasksname;
	
	private System.Nullable<int> _taskquantity;
	
	private EntitySet<assignment> _assignment;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntaskidChanging(int value);
    partial void OntaskidChanged();
    partial void OnstarttimeChanging(System.Nullable<System.DateTime> value);
    partial void OnstarttimeChanged();
    partial void OnendtimeChanging(System.Nullable<System.DateTime> value);
    partial void OnendtimeChanged();
    partial void OntaskrateChanging(System.Nullable<double> value);
    partial void OntaskrateChanged();
    partial void OntasknameChanging(string value);
    partial void OntasknameChanged();
    partial void OntaskdetailChanging(string value);
    partial void OntaskdetailChanged();
    partial void OntasksnameChanging(string value);
    partial void OntasksnameChanged();
    partial void OntaskquantityChanging(System.Nullable<int> value);
    partial void OntaskquantityChanged();
    #endregion
	
	public task()
	{
		this._assignment = new EntitySet<assignment>(new Action<assignment>(this.attach_assignment), new Action<assignment>(this.detach_assignment));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_taskid", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int taskid
	{
		get
		{
			return this._taskid;
		}
		set
		{
			if ((this._taskid != value))
			{
				this.OntaskidChanging(value);
				this.SendPropertyChanging();
				this._taskid = value;
				this.SendPropertyChanged("taskid");
				this.OntaskidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_starttime", DbType="Date")]
	public System.Nullable<System.DateTime> starttime
	{
		get
		{
			return this._starttime;
		}
		set
		{
			if ((this._starttime != value))
			{
				this.OnstarttimeChanging(value);
				this.SendPropertyChanging();
				this._starttime = value;
				this.SendPropertyChanged("starttime");
				this.OnstarttimeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_endtime", DbType="Date")]
	public System.Nullable<System.DateTime> endtime
	{
		get
		{
			return this._endtime;
		}
		set
		{
			if ((this._endtime != value))
			{
				this.OnendtimeChanging(value);
				this.SendPropertyChanging();
				this._endtime = value;
				this.SendPropertyChanged("endtime");
				this.OnendtimeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_taskrate", DbType="Float")]
	public System.Nullable<double> taskrate
	{
		get
		{
			return this._taskrate;
		}
		set
		{
			if ((this._taskrate != value))
			{
				this.OntaskrateChanging(value);
				this.SendPropertyChanging();
				this._taskrate = value;
				this.SendPropertyChanged("taskrate");
				this.OntaskrateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_taskname", DbType="VarChar(100)")]
	public string taskname
	{
		get
		{
			return this._taskname;
		}
		set
		{
			if ((this._taskname != value))
			{
				this.OntasknameChanging(value);
				this.SendPropertyChanging();
				this._taskname = value;
				this.SendPropertyChanged("taskname");
				this.OntasknameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_taskdetail", DbType="VarChar(400)")]
	public string taskdetail
	{
		get
		{
			return this._taskdetail;
		}
		set
		{
			if ((this._taskdetail != value))
			{
				this.OntaskdetailChanging(value);
				this.SendPropertyChanging();
				this._taskdetail = value;
				this.SendPropertyChanged("taskdetail");
				this.OntaskdetailChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tasksname", DbType="VarChar(100)")]
	public string tasksname
	{
		get
		{
			return this._tasksname;
		}
		set
		{
			if ((this._tasksname != value))
			{
				this.OntasksnameChanging(value);
				this.SendPropertyChanging();
				this._tasksname = value;
				this.SendPropertyChanged("tasksname");
				this.OntasksnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_taskquantity", DbType="Int")]
	public System.Nullable<int> taskquantity
	{
		get
		{
			return this._taskquantity;
		}
		set
		{
			if ((this._taskquantity != value))
			{
				this.OntaskquantityChanging(value);
				this.SendPropertyChanging();
				this._taskquantity = value;
				this.SendPropertyChanged("taskquantity");
				this.OntaskquantityChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="task_assignment", Storage="_assignment", ThisKey="taskid", OtherKey="taskid")]
	public EntitySet<assignment> assignment
	{
		get
		{
			return this._assignment;
		}
		set
		{
			this._assignment.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_assignment(assignment entity)
	{
		this.SendPropertyChanging();
		entity.task = this;
	}
	
	private void detach_assignment(assignment entity)
	{
		this.SendPropertyChanging();
		entity.task = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.teacher")]
public partial class teacher : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _teacherID;
	
	private string _name;
	
	private string _password;
	
	private EntitySet<sources> _sources;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnteacherIDChanging(int value);
    partial void OnteacherIDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    #endregion
	
	public teacher()
	{
		this._sources = new EntitySet<sources>(new Action<sources>(this.attach_sources), new Action<sources>(this.detach_sources));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_teacherID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int teacherID
	{
		get
		{
			return this._teacherID;
		}
		set
		{
			if ((this._teacherID != value))
			{
				this.OnteacherIDChanging(value);
				this.SendPropertyChanging();
				this._teacherID = value;
				this.SendPropertyChanged("teacherID");
				this.OnteacherIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(10)")]
	public string name
	{
		get
		{
			return this._name;
		}
		set
		{
			if ((this._name != value))
			{
				this.OnnameChanging(value);
				this.SendPropertyChanging();
				this._name = value;
				this.SendPropertyChanged("name");
				this.OnnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="VarChar(10)")]
	public string password
	{
		get
		{
			return this._password;
		}
		set
		{
			if ((this._password != value))
			{
				this.OnpasswordChanging(value);
				this.SendPropertyChanging();
				this._password = value;
				this.SendPropertyChanged("password");
				this.OnpasswordChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="teacher_sources", Storage="_sources", ThisKey="teacherID", OtherKey="teacherID")]
	public EntitySet<sources> sources
	{
		get
		{
			return this._sources;
		}
		set
		{
			this._sources.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_sources(sources entity)
	{
		this.SendPropertyChanging();
		entity.teacher = this;
	}
	
	private void detach_sources(sources entity)
	{
		this.SendPropertyChanging();
		entity.teacher = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.team")]
public partial class team : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _teamID;
	
	private System.Nullable<int> _teamleaderID;
	
	private System.Nullable<int> _quantity;
	
	private System.Nullable<int> _femaleNumber;
	
	private string _teamMember;
	
	private string _teamName;
	
	private System.Nullable<bool> _ifOrganized;
	
	private System.Nullable<bool> _ifChecked;
	
	private System.Nullable<bool> _ifAccepted;
	
	private System.Nullable<int> _teamScore;
	
	private string _rejectingReason;
	
	private string _checkingList;
	
	private EntitySet<assignment> _assignment;
	
	private EntityRef<student> _student;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnteamIDChanging(int value);
    partial void OnteamIDChanged();
    partial void OnteamleaderIDChanging(System.Nullable<int> value);
    partial void OnteamleaderIDChanged();
    partial void OnquantityChanging(System.Nullable<int> value);
    partial void OnquantityChanged();
    partial void OnfemaleNumberChanging(System.Nullable<int> value);
    partial void OnfemaleNumberChanged();
    partial void OnteamMemberChanging(string value);
    partial void OnteamMemberChanged();
    partial void OnteamNameChanging(string value);
    partial void OnteamNameChanged();
    partial void OnifOrganizedChanging(System.Nullable<bool> value);
    partial void OnifOrganizedChanged();
    partial void OnifCheckedChanging(System.Nullable<bool> value);
    partial void OnifCheckedChanged();
    partial void OnifAcceptedChanging(System.Nullable<bool> value);
    partial void OnifAcceptedChanged();
    partial void OnteamScoreChanging(System.Nullable<int> value);
    partial void OnteamScoreChanged();
    partial void OnrejectingReasonChanging(string value);
    partial void OnrejectingReasonChanged();
    partial void OncheckingListChanging(string value);
    partial void OncheckingListChanged();
    #endregion
	
	public team()
	{
		this._assignment = new EntitySet<assignment>(new Action<assignment>(this.attach_assignment), new Action<assignment>(this.detach_assignment));
		this._student = default(EntityRef<student>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_teamID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int teamID
	{
		get
		{
			return this._teamID;
		}
		set
		{
			if ((this._teamID != value))
			{
				this.OnteamIDChanging(value);
				this.SendPropertyChanging();
				this._teamID = value;
				this.SendPropertyChanged("teamID");
				this.OnteamIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_teamleaderID", DbType="Int")]
	public System.Nullable<int> teamleaderID
	{
		get
		{
			return this._teamleaderID;
		}
		set
		{
			if ((this._teamleaderID != value))
			{
				if (this._student.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnteamleaderIDChanging(value);
				this.SendPropertyChanging();
				this._teamleaderID = value;
				this.SendPropertyChanged("teamleaderID");
				this.OnteamleaderIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_quantity", DbType="Int")]
	public System.Nullable<int> quantity
	{
		get
		{
			return this._quantity;
		}
		set
		{
			if ((this._quantity != value))
			{
				this.OnquantityChanging(value);
				this.SendPropertyChanging();
				this._quantity = value;
				this.SendPropertyChanged("quantity");
				this.OnquantityChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_femaleNumber", DbType="Int")]
	public System.Nullable<int> femaleNumber
	{
		get
		{
			return this._femaleNumber;
		}
		set
		{
			if ((this._femaleNumber != value))
			{
				this.OnfemaleNumberChanging(value);
				this.SendPropertyChanging();
				this._femaleNumber = value;
				this.SendPropertyChanged("femaleNumber");
				this.OnfemaleNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_teamMember", DbType="VarChar(80)")]
	public string teamMember
	{
		get
		{
			return this._teamMember;
		}
		set
		{
			if ((this._teamMember != value))
			{
				this.OnteamMemberChanging(value);
				this.SendPropertyChanging();
				this._teamMember = value;
				this.SendPropertyChanged("teamMember");
				this.OnteamMemberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_teamName", DbType="VarChar(50)")]
	public string teamName
	{
		get
		{
			return this._teamName;
		}
		set
		{
			if ((this._teamName != value))
			{
				this.OnteamNameChanging(value);
				this.SendPropertyChanging();
				this._teamName = value;
				this.SendPropertyChanged("teamName");
				this.OnteamNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ifOrganized", DbType="Bit")]
	public System.Nullable<bool> ifOrganized
	{
		get
		{
			return this._ifOrganized;
		}
		set
		{
			if ((this._ifOrganized != value))
			{
				this.OnifOrganizedChanging(value);
				this.SendPropertyChanging();
				this._ifOrganized = value;
				this.SendPropertyChanged("ifOrganized");
				this.OnifOrganizedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ifChecked", DbType="Bit")]
	public System.Nullable<bool> ifChecked
	{
		get
		{
			return this._ifChecked;
		}
		set
		{
			if ((this._ifChecked != value))
			{
				this.OnifCheckedChanging(value);
				this.SendPropertyChanging();
				this._ifChecked = value;
				this.SendPropertyChanged("ifChecked");
				this.OnifCheckedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ifAccepted", DbType="Bit")]
	public System.Nullable<bool> ifAccepted
	{
		get
		{
			return this._ifAccepted;
		}
		set
		{
			if ((this._ifAccepted != value))
			{
				this.OnifAcceptedChanging(value);
				this.SendPropertyChanging();
				this._ifAccepted = value;
				this.SendPropertyChanged("ifAccepted");
				this.OnifAcceptedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_teamScore", DbType="Int")]
	public System.Nullable<int> teamScore
	{
		get
		{
			return this._teamScore;
		}
		set
		{
			if ((this._teamScore != value))
			{
				this.OnteamScoreChanging(value);
				this.SendPropertyChanging();
				this._teamScore = value;
				this.SendPropertyChanged("teamScore");
				this.OnteamScoreChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rejectingReason", DbType="VarChar(300)")]
	public string rejectingReason
	{
		get
		{
			return this._rejectingReason;
		}
		set
		{
			if ((this._rejectingReason != value))
			{
				this.OnrejectingReasonChanging(value);
				this.SendPropertyChanging();
				this._rejectingReason = value;
				this.SendPropertyChanged("rejectingReason");
				this.OnrejectingReasonChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_checkingList", DbType="VarChar(300)")]
	public string checkingList
	{
		get
		{
			return this._checkingList;
		}
		set
		{
			if ((this._checkingList != value))
			{
				this.OncheckingListChanging(value);
				this.SendPropertyChanging();
				this._checkingList = value;
				this.SendPropertyChanged("checkingList");
				this.OncheckingListChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="team_assignment", Storage="_assignment", ThisKey="teamID", OtherKey="teamID")]
	public EntitySet<assignment> assignment
	{
		get
		{
			return this._assignment;
		}
		set
		{
			this._assignment.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="student_team", Storage="_student", ThisKey="teamleaderID", OtherKey="studentID", IsForeignKey=true)]
	public student student
	{
		get
		{
			return this._student.Entity;
		}
		set
		{
			student previousValue = this._student.Entity;
			if (((previousValue != value) 
						|| (this._student.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._student.Entity = null;
					previousValue.team.Remove(this);
				}
				this._student.Entity = value;
				if ((value != null))
				{
					value.team.Add(this);
					this._teamleaderID = value.studentID;
				}
				else
				{
					this._teamleaderID = default(Nullable<int>);
				}
				this.SendPropertyChanged("student");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_assignment(assignment entity)
	{
		this.SendPropertyChanging();
		entity.team = this;
	}
	
	private void detach_assignment(assignment entity)
	{
		this.SendPropertyChanging();
		entity.team = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.student")]
public partial class student : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _studentID;
	
	private string _name;
	
	private string _gender;
	
	private string _password;
	
	private System.Nullable<int> _teamID;
	
	private System.Nullable<int> _Score;
	
	private System.Nullable<double> _ContributionRate;
	
	private System.Nullable<bool> _rejectedByTeacher;
	
	private System.Nullable<bool> _rejectedByLeader;
	
	private string _excuseByTeacher;
	
	private EntitySet<team> _team;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnstudentIDChanging(int value);
    partial void OnstudentIDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OngenderChanging(string value);
    partial void OngenderChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OnteamIDChanging(System.Nullable<int> value);
    partial void OnteamIDChanged();
    partial void OnScoreChanging(System.Nullable<int> value);
    partial void OnScoreChanged();
    partial void OnContributionRateChanging(System.Nullable<double> value);
    partial void OnContributionRateChanged();
    partial void OnrejectedByTeacherChanging(System.Nullable<bool> value);
    partial void OnrejectedByTeacherChanged();
    partial void OnrejectedByLeaderChanging(System.Nullable<bool> value);
    partial void OnrejectedByLeaderChanged();
    partial void OnexcuseByTeacherChanging(string value);
    partial void OnexcuseByTeacherChanged();
    #endregion
	
	public student()
	{
		this._team = new EntitySet<team>(new Action<team>(this.attach_team), new Action<team>(this.detach_team));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_studentID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int studentID
	{
		get
		{
			return this._studentID;
		}
		set
		{
			if ((this._studentID != value))
			{
				this.OnstudentIDChanging(value);
				this.SendPropertyChanging();
				this._studentID = value;
				this.SendPropertyChanged("studentID");
				this.OnstudentIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(10)")]
	public string name
	{
		get
		{
			return this._name;
		}
		set
		{
			if ((this._name != value))
			{
				this.OnnameChanging(value);
				this.SendPropertyChanging();
				this._name = value;
				this.SendPropertyChanged("name");
				this.OnnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_gender", DbType="VarChar(8)")]
	public string gender
	{
		get
		{
			return this._gender;
		}
		set
		{
			if ((this._gender != value))
			{
				this.OngenderChanging(value);
				this.SendPropertyChanging();
				this._gender = value;
				this.SendPropertyChanged("gender");
				this.OngenderChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="VarChar(10)")]
	public string password
	{
		get
		{
			return this._password;
		}
		set
		{
			if ((this._password != value))
			{
				this.OnpasswordChanging(value);
				this.SendPropertyChanging();
				this._password = value;
				this.SendPropertyChanged("password");
				this.OnpasswordChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_teamID", DbType="Int")]
	public System.Nullable<int> teamID
	{
		get
		{
			return this._teamID;
		}
		set
		{
			if ((this._teamID != value))
			{
				this.OnteamIDChanging(value);
				this.SendPropertyChanging();
				this._teamID = value;
				this.SendPropertyChanged("teamID");
				this.OnteamIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Score", DbType="Int")]
	public System.Nullable<int> Score
	{
		get
		{
			return this._Score;
		}
		set
		{
			if ((this._Score != value))
			{
				this.OnScoreChanging(value);
				this.SendPropertyChanging();
				this._Score = value;
				this.SendPropertyChanged("Score");
				this.OnScoreChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContributionRate", DbType="Float")]
	public System.Nullable<double> ContributionRate
	{
		get
		{
			return this._ContributionRate;
		}
		set
		{
			if ((this._ContributionRate != value))
			{
				this.OnContributionRateChanging(value);
				this.SendPropertyChanging();
				this._ContributionRate = value;
				this.SendPropertyChanged("ContributionRate");
				this.OnContributionRateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rejectedByTeacher", DbType="Bit")]
	public System.Nullable<bool> rejectedByTeacher
	{
		get
		{
			return this._rejectedByTeacher;
		}
		set
		{
			if ((this._rejectedByTeacher != value))
			{
				this.OnrejectedByTeacherChanging(value);
				this.SendPropertyChanging();
				this._rejectedByTeacher = value;
				this.SendPropertyChanged("rejectedByTeacher");
				this.OnrejectedByTeacherChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rejectedByLeader", DbType="Bit")]
	public System.Nullable<bool> rejectedByLeader
	{
		get
		{
			return this._rejectedByLeader;
		}
		set
		{
			if ((this._rejectedByLeader != value))
			{
				this.OnrejectedByLeaderChanging(value);
				this.SendPropertyChanging();
				this._rejectedByLeader = value;
				this.SendPropertyChanged("rejectedByLeader");
				this.OnrejectedByLeaderChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_excuseByTeacher", DbType="VarChar(200)")]
	public string excuseByTeacher
	{
		get
		{
			return this._excuseByTeacher;
		}
		set
		{
			if ((this._excuseByTeacher != value))
			{
				this.OnexcuseByTeacherChanging(value);
				this.SendPropertyChanging();
				this._excuseByTeacher = value;
				this.SendPropertyChanged("excuseByTeacher");
				this.OnexcuseByTeacherChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="student_team", Storage="_team", ThisKey="studentID", OtherKey="teamleaderID")]
	public EntitySet<team> team
	{
		get
		{
			return this._team;
		}
		set
		{
			this._team.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_team(team entity)
	{
		this.SendPropertyChanging();
		entity.student = this;
	}
	
	private void detach_team(team entity)
	{
		this.SendPropertyChanging();
		entity.student = null;
	}
}
#pragma warning restore 1591
